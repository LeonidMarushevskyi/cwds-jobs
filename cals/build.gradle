buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

version = parent.version

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://sonar.dev.cwds.io:8081/artifactory/repo" }
    maven {
        url "https://artifacts.elastic.co/maven"
    }
}

project.ext {
    // assume that Windows users use the Docker Toolbox
    buildEnv = System.env.BUILD_ENV ?: (Os.isFamily(Os.FAMILY_WINDOWS) ? 'WIN_DEV' : 'JENKINS')
    devDockerHost = System.env.DEV_DOCKER_HOST ?: 'localhost'
    devDockerPort = 2376
    elasticHost = 'localhost'
    elasticPort = 9200
    log4jVersion = "2.8"
    elasticsearchVersion = "5.5.2"
    calsApiVersion = '0.5.4_813-RC'
}

dependencies {

    // CALS API for CALS Jobs
    compile(group: 'gov.ca.cwds.cals', name: 'cals-api', version: calsApiVersion) {
        exclude group: 'org.bouncycastle'
        exclude group: 'org.liquibase', module: 'liquibase-core'
    }

    // ES 5.x:
    compile("org.elasticsearch.client:x-pack-transport:" + elasticsearchVersion)

    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    testCompile 'org.mockito:mockito-core:2.0.54-beta'
    testCompile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'
}

import org.apache.tools.ant.taskdefs.condition.Os

project.ext.dockerEnvVars = project.buildEnv != 'WIN_DEV' ? [:] : [
        DOCKER_CERT_PATH             : System.getProperty("user.home") + '/.docker/machine/machines/default',
        DOCKER_HOST                  : "tcp://$project.devDockerHost:$project.devDockerPort",
        DOCKER_MACHINE_NAME          : 'default',
        DOCKER_TLS_VERIFY            : '1',
        COMPOSE_CONVERT_WINDOWS_PATHS: 'true'
]

def testEsDockerImageName = 'cwds/jobs-test-elasticsearch'
def testEsContainerName = 'jobs-test-elasticsearch'

shadowJar {
    zip64 true
    classifier = ''
    baseName = (System.properties.getProperty('baseName') != null) ? System.properties.getProperty('baseName') : 'cals-jobs'
    mergeServiceFiles()
    /*manifest {
        Attributes 'Main-Class': (System.properties.getProperty('mainClass') != null) ? System.properties.getProperty('mainClass') : 'gov.ca.cwds.jobs.cals.facility.FacilityIndexerJob'
    }*/
    version version + ((System.properties.getProperty('build') != null) ? '.' + System.properties.getProperty('build') : '')
}


static def isPortOpen(host, port) {
    try {
        Socket socket = new Socket(host, port)
        socket.close()
        return true
    } catch (IOException e) {
        return false
    }
}

void waitForPortToOpen(host, port, millis, maxAttempts) {
    boolean isOpen = false
    int attempts = 0
    while (!isOpen) {
        if (++attempts > maxAttempts) throw new GradleException("Failed to wait for $host:$port to open")
        isOpen = isPortOpen(host, port)
        if (isOpen) {
            println "\n$host:$port is open"
        } else {
            println "\nWaiting ${millis}ms for $host:$port to open ($attempts/$maxAttempts)..."
            sleep(millis)
        }
    }
}

task checkDockerService(type: Exec) {
    enabled = project.buildEnv == 'WIN_DEV'
    doFirst {
        if (!isPortOpen(project.devDockerHost, project.devDockerPort)) {
            throw new GradleException('Docker service is not available. Windows users should start Docker Quickstart Terminal of Docker Toolbox')
        }
        // update system limits on the docker host machine, so the elasticsearch service can start in a container
        commandLine 'docker-machine', 'ssh', 'default', 'sudo', 'sysctl', '-w', 'vm.max_map_count=262144'
    }
}

task testEsDockerCleanUpBeforeTest(type: Exec, dependsOn: checkDockerService) {
    ignoreExitValue true
    environment << dockerEnvVars
    doFirst {
        commandLine 'docker', 'rm', '-v', '--force', testEsContainerName
    }
    doLast {
        commandLine 'docker', 'rmi', '-v', '--force', testEsDockerImageName
    }
}
// have to duplicate the clean up actions to avoid circular dependencies, to be optimized
task testEsDockerCleanUpAfterTest(type: Exec, dependsOn: checkDockerService) {
    ignoreExitValue true
    environment << dockerEnvVars
    doFirst {
        commandLine 'docker', 'rm', '-v', '--force', testEsContainerName
    }
    doLast {
        commandLine 'docker', 'rmi', '-v', '--force', testEsDockerImageName
    }
}

task testEsDockerCreateImage(type: Exec, dependsOn: [checkDockerService, testEsDockerCleanUpBeforeTest]) {
    testEsDockerCleanUpBeforeTest.mustRunAfter(checkDockerService)
    environment << dockerEnvVars
    doFirst {
        commandLine 'docker', 'build', '-t', testEsDockerImageName,
                '-f', "$rootProject.projectDir/cals/src/test/resources/es/Dockerfile",
                '--build-arg', "ELASTICSEARCH_VERSION=$project.elasticsearchVersion",
                "$rootProject.projectDir/cals/src/test/resources/es/"
    }
}

task testEsDockerStartContainer(type: Exec, dependsOn: [checkDockerService, testEsDockerCreateImage]) {
    testEsDockerCreateImage.mustRunAfter(checkDockerService)
    environment << dockerEnvVars
    doFirst {
        commandLine 'docker', 'run', '-d', "--name=$testEsContainerName", '-p', "9216:$project.elasticPort", '-p', '9316:9300', '-e', "http.host=0.0.0.0", '-e', "transport.host=127.0.0.1", testEsDockerImageName
    }
    doLast {
        waitForPortToOpen(project.elasticHost, 9216, 1000, 60)
    }
}

test.dependsOn testEsDockerStartContainer
test.finalizedBy testEsDockerCleanUpAfterTest

publishing {
    publications {
        shadow(MavenPublication) {
            from components.shadow
            groupId 'gov.ca.cwds.jobs'
            artifactId 'cals-jobs-shadow'
        }
    }
    repositories {
        maven {
            url artifactoryRepo
        }
    }
}
